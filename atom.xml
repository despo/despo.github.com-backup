<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Despo Pentara]]></title>
  <link href="http://despo.github.io/atom.xml" rel="self"/>
  <link href="http://despo.github.io/"/>
  <updated>2014-01-24T16:59:40+00:00</updated>
  <id>http://despo.github.io/</id>
  <author>
    <name><![CDATA[Despo Pentara]]></name>
    <email><![CDATA[despo@extractmethod.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hangman API]]></title>
    <link href="http://despo.github.io/blog/2014/01/24/hangman-api/"/>
    <updated>2014-01-24T02:04:25+00:00</updated>
    <id>http://despo.github.io/blog/2014/01/24/hangman-api</id>
    <content type="html"><![CDATA[<p>In the latest <a href="http://codebar.io">codebar.io</a> <a href="http://codebar.github.io/tutorials/js/lesson5/tutorial.html">tutorial</a>, we are working with AJAX Requests. We have already used the <a href="http://codebar.github.io/tutorials/examples/github-user-finder/index.html">Github</a> and the <a href="http://codebar.github.io/tutorials/examples/tv-schedule/">BBC</a> APIs issuing <strong>GET</strong> requests to retrieve information.</p>

<p>I built a sinatra app that handles JSON requests using <strong>POST</strong>, <strong>PUT</strong> and <strong>GET</strong> to manage a Hangman game. As part of doing this, I also had to enable CORS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> in Sinatra so that the calls could be executed from any domain.</p>

<h2>CORS</h2>

<p>To enable CORS first you must allow requests originating from any domain but setting the <strong>Access-Control-Allow-Origin</strong> to any (unless you only want to only allow specific domains).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<br/>


<h3>Not <a href="http://www.w3.org/TR/cors/#simple-method">so simple</a> requests</h3>

<p>For every not <a href="http://www.w3.org/TR/cors/#simple-method">so simple</a> request, a preflight request is also issued. The browser asks the server for permission to issue the request and waits until its granted before doing anything else.</p>

<p>The preflight request is <strong>OPTIONS</strong>.  The response must have <strong>Access-Control-Allow-Origin</strong> and <strong>Access-Control-Allow-Methods</strong> defined. To allow requests issued by JQuery, I also had to allow the <strong>X-Requested-With</strong> header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="s1">&#39;/hangman&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Methods&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;PUT&quot;</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Headers&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;X-Requested-With&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Game State</h2>

<p>Using a database to store the game state is a bit overkill for such a simple app, so I instead I chose to store the state in a <code>Base64</code> encoded token which the client sends on each request &ndash; thanks to <a href="http://twitter.com/barisbalic">@barisbalic</a> for the suggestion. Alternatively, a cookie could have been used, but explicitly passing the token allows the client to run multiple games at the same time, and also required less effort to implement.</p>

<h3>Generating the token</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Base64</span><span class="o">.</span><span class="n">urlsafe_encode64</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:solution</span> <span class="o">=&gt;</span> <span class="n">hangman</span><span class="o">.</span><span class="n">solution</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:correct_guesses</span> <span class="o">=&gt;</span> <span class="n">hangman</span><span class="o">.</span><span class="n">correct_guesses</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:wrong_guesses</span> <span class="o">=&gt;</span> <span class="n">hangman</span><span class="o">.</span><span class="n">wrong_guesses</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Getting information from the token</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">properties</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">Base64</span><span class="o">.</span><span class="n">urlsafe_decode64</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h2>Playing Hangman using <strong>curl</strong></h2>

<h3>Start a new game</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST http://hangman-api.herokuapp.com/hangman
</span></code></pre></td></tr></table></div></figure>


<h3>Guess a letter</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X PUT <span class="se">\</span>
</span><span class='line'>      http://hangman-api.herokuapp.com/hangman <span class="se">\</span>
</span><span class='line'>      -d <span class="nv">token</span><span class="o">=</span>token <span class="se">\</span>
</span><span class='line'>      -d <span class="nv">letter</span><span class="o">=</span>guess
</span></code></pre></td></tr></table></div></figure>


<h3>Get the solution</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X GET <span class="se">\</span>
</span><span class='line'>      http://hangman-api.herokuapp.com/hangman <span class="se">\</span>
</span><span class='line'>      -d <span class="nv">token</span><span class="o">=</span>token
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://hangman-api.herokuapp.com/api">Read more</a> about the API.</p>

<h2>Playing Hangman using the interface</h2>

<p><a href="http://hangman-api.herokuapp.com">http://hangman-api.herokuapp.com</a></p>

<h2><img src="http://despo.github.io/images/hangman.png" alt="hangman" /></h2>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.w3.org/TR/cors/">Cross-Origin Resource Sharing</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gorillas]]></title>
    <link href="http://despo.github.io/blog/2012/04/01/gorillas/"/>
    <updated>2012-04-01T01:00:00+01:00</updated>
    <id>http://despo.github.io/blog/2012/04/01/gorillas</id>
    <content type="html"><![CDATA[<p><a href="http://gorillas.herokuapp.com">Gorillas</a> is a clone of <a href="http://en.wikipedia.org/wiki/Gorillas_(video_game)">QBasic&rsquo;s Gorillas</a> built in coffeescript.</p>

<p><img src="http://despo.github.io/images/gorillas.png" alt="Gorillas in Coffeescript" /></p>

<p>There is some missing functionality like the <a href="https://github.com/despo/gorillas/blob/master/docs/gorillas.bas#L669">startup screen</a> and the <a href="https://github.com/despo/gorillas/blob/master/docs/gorillas.bas#L790">wind speed</a>. I would also like to optionally automate one of the two player and store scores for a username. If you&rsquo;d like to help out you can <a href="http://github.com/despo/gorillas">fork the project</a> and issue a PR.</p>
]]></content>
  </entry>
  
</feed>
